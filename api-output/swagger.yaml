openapi: 3.0.0
info:
  title: todo
  description: A simple crud todo api
  version: "1.0"
servers:
- url: https://virtserver.swaggerhub.com/MACMANUSTEPHEN/todo_api/1.0
  description: SwaggerHub API Auto Mocking
paths:
  /registeruser/:
    post:
      summary: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created
        "400":
          description: bad-request
  /users/:
    get:
      summary: Returns all Users
      responses:
        "200":
          description: Users returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "404":
          description: No user available
  /users/{userId}:
    get:
      summary: Get one user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
  /createtodo/:
    post:
      summary: Creates a new Todo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        "201":
          description: Todo created
        "400":
          description: bad-request
  /todos/:
    get:
      summary: Returns all Todos
      responses:
        "200":
          description: Todos returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        "404":
          description: No Todo available
  /todos/{todoId}:
    get:
      summary: Get one todo
      parameters:
      - name: todoId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Todo details returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        "404":
          description: Todo not found
  /todo/{todoId}/update:
    put:
      summary: Get one todo by ID and update it
      parameters:
      - name: todoId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/josn:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        "200":
          description: Todo details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        "404":
          description: Todo not found
  /todo/{todoId}/delete:
    delete:
      summary: Get one todo by ID and delete it
      parameters:
      - name: todoId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Todo has been deleted successfully
        "404":
          description: Todo not found
  /users/{userId}/todos:
    get:
      summary: Get all the todos of a user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User's todos retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Todo:
      type: object
      properties:
        id:
          type: string
        user:
          type: object
        title:
          type: string
        body:
          type: string
        updated:
          type: object
        created:
          type: object
